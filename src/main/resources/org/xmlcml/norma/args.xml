<argList name="norma" version="0.3.1">

<!--  read by DefaultArgProcessor called from NormaArgProcessor.init()  -->

  <p>20160908: major revision of autodetection of stylesheets</p>
  
  <p>20160509: csv2html conversion and --inputDir</p>
  <p>20160501: added TaylorAndFrancis cleaner - nearly finished</p>
  <p>20160407: no changes, except version</p>
  <p>20160329: citation extraction and plotting</p>
  <p>20160322: more JATS including PM(C)ID extraction</p>
  <p>20160322: major work on JATS </p>
  <p>20160320: "finished" sections </p>
  <p>20160313: more sections </p>
  <p>20160305: analysing sections in NLM</p>
  <p>20160305: finished nlm2html stylesheet</p>
  <p>20160304: major output tidy</p>
  <p>20160302: tidied NLM XSL</p>
  <p>20160223: tidied NLM XSL</p>
  <p>20160223:  tracking cmine</p>
  <p>20160211: testing Cell Rendering</p>
  <p>20160211: tracking cmine</p>
  <p>20160211: fixed nlm2html</p>
  <p>20160207: tracking new commandline</p>
  <p>20160204: small changes responding to cmine</p>
  <p>20160122: moved cleanAndCopy to CMine</p>
  <p>20160119: Ignored CommandLineTest</p>
  <p>20160114: removed OpenNLP because too large</p>
  <p>20160114: tested after cmine</p>
  <p>20160114: moved classes to NormaFixtures</p>
  <p>20160113: compatibility with cmine and ami</p>
    <!-- added automatic editing (editor) -->
    
 <arg name="char" brief="-c" long="--chars"
  args="[pairs of characters, as unicode points; i.e. char00, char01, char10, char11, char20, char21"
  class="org.xmlcml.cproject.args.StringPair" countRange="{1,*}"
  parseMethod="parseChars">
  <help>
   CHARS:
   NOT YET IMPLEMENTED
   Replaces one character by another. There are many cases where original
   characters are unsuitable
   for science and can be replaced (often by low codepoints).
   Smart (balanced) quotes can usually be replaced by \" or '
   mdash is often used where minus is better
   Format, strings of form u1234
  </help>
 </arg>

 <arg name="cropbox" long="--cropbox" args="coordinates ..."
  countRange="{8,*}" parseMethod="parseCropBox"
  runMethod="runCropMediaBox"
  >
  <help>
  reads a cropBox for clipping SVG pages. Format is:
  "x0" x0 "y0" y0 ["x1" x1 "y1" y1 | "width" w "height" h ] ["ydown|yup"] ["units" units]
  where "xx" is a literal string and [...] are optional.
  </help>
 </arg>

 <arg name="div" brief="-d" long="--divs" args="expression [expression] ..."
  countRange="{1,*}" parseMethod="parseDivs">
  <help>
   DIVS:
   NOT YET IMPLEMENTED
   List of expressions identifying XML element to wrap as divs/sections
   Examples might be h1, h2, h3, or numbers sections
   Still under development.
  </help>
 </arg>

 <arg name="html" long="--html" args="[HTML tidy option, jsoup, jtidy, htmlunit]"
  countRange="{1,1}" parseMethod="parseHtml" runMethod="runHtml">
  <!-- default ="jsoup" -->
  <help>
   Clean raw HTML and produce XHTML. Requires heuristics:
   <ul>
   <li>quickscrape and getpapers create a JS DOM which has
   normalised some, but not all, elements</li>
   <li>remove &lt;script> and other elements which are likely
   to be non-XML-compliant. Adjustable through &lt;value></li>
   <li>remove other artefacts (e.g. attributes like "=""")</li>
   <li>run through html-tidy (jsoup, jtidy, htmlunit). They all try
   to sort out mess - the last is probably the best but I haven't
   bolted it in yet.</li>
   <li>remove empty &lt;div>s, &lt;p>s, etc.</li>
   </ul>
   This is NOT scholarly.html and will need a publisher-specific
   stylesheet for further processing.
  </help>
 </arg>

 <arg name="htmlAggregate" long="--htmlAggregate" args="[fileFilter [...fileFilter]]"
  countRange="{1,*}" parseMethod="parseHtmlAggregate" runMethod="runHtmlAggregate">
  <help>
  aggregates the results of fileFilter into a buttonedDisplay.
typical command:
<pre>
norma --project foo --fileFilter subdirFilter --htmlDisplay filter1 filter2 ... --output tableView.html  
</pre>
this will iterate over the CTrees down to level subdirFilter, then apply the display filters (normally only one) to collect 
a bundle of files and then display them in a ButtonTab display.

NOT YET FULLY IMPLEMENTED.
  </help>
 </arg>

 <arg name="htmlDisplay" long="--htmlDisplay" args="[fileFilter [...fileFilter]]"
  countRange="{1,*}" parseMethod="parseHtmlDisplay" runMethod="runHtmlDisplay">
  <help>
  aggregates the results of fileFilter into &lt;td> cells in an &lt;tr> for display. 
  Future versions may aggregate these into a larger table.
typical command:
<pre>
norma --project foo --fileFilter subdirFilter --htmlDisplay filter1 filter2 ... --output tableRow.html  
</pre>
this will iterate over the CTrees down to level subdirFilter, then apply the display filters. The result of
each will be an a TD cell. The result is an HTML TR output to tableRow.html
NOT YET FULLY IMPLEMENTED.
  </help>
 </arg>
 
  <arg name="mediabox" long="--mediabox" args="coordinates ..."
  countRange="{8,*}" parseMethod="parseMediaBox"
  >
  <help>
  reads a mediaBox for defining SVG pages. Format is:
  "x0" x0 "y0" y0 ["x1" x1 "y1" y1 | "width" w "height" h ] ["ydown|yup"] ["units" units]
  where "xx" is a literal string and [...] are optional.
  </help>
 </arg>

 <arg 
     name="move2" 
     long="--move2" 
     args=" [new path]"
  class="java.lang.String" 
  countRange="{1,1}"
  parseMethod="parseMove2"
  runMethod="runMove2">
  <help>
  REPLACES the old "move" command.
  Requires a -fileFilter to create the input. This will probably have capture groups
  These files are renamed on a 1:1 basis 
  Example:
  norma --cproject foo --fileFilter .*foo/bar(\d+)/plugh(A|B).xml --move2 boof(\2)/bliff(\1)/splugh.txt
  would move
  ctree/foo/bar3/plughB.xml
  to
  ctree/boofB/bliff3/splugh.txt
  
  All regexes must be capture groups mapped to output counting from 1. 
   
  </help>
 </arg>

 <arg 
     name="move" 
     long="--move" 
     args=" glob directory"
  class="org.xmlcml.cproject.args.StringPair" 
  countRange="{1,*}"
  parseMethod="parseMove"
  runMethod="runMove">
  <help>
   NOT YET FULLY IMPLEMENTED
   NOTE complemented by new "move" command
   moves files of type glob to directory (subdirectory of CTree), creating it if necessary
   at the moment globbing only on file suffixes as we need to protect the metacharacters
   from the shell.
   
   So if glob = "csv" and directory is table, files of type "*.csv" are moved to ctree/table/
   
  </help>
 </arg>

 <arg 
     name="name" 
     brief="-n" 
     long="--name" 
     args=" tag1,tag2 [tag1,tag2 ....]"
  class="org.xmlcml.cproject.args.StringPair" 
  countRange="{1,*}"
  parseMethod="parseNames">
  <help>
   NAME:
   NOT YET IMPLEMENTED
   List of comma-separated pairs of tags; the first is replaced by the
   second. Example might be:
   em,i strong,b
   i.e. replace all &lt;em>...&lt;/em> by &lt;i>...&lt;/i>
  </help>
 </arg>

 <arg name="pageNumbers" long="--pageNumbers" args="pagenumber [pagenumber*] ..."
  countRange="{1,*}" 
  class="java.lang.Integer"
  parseMethod="parsePageNumbers"
  runMethod="runPageNumbers"
  >
  <help>
  page numbers of PDF to select.
  for each page (inner loop) some action will be taken. At present this is 
  cropBox. More may come later.
  </help>
 </arg>


 <arg 
     name="pubstyle" 
     brief="-p" 
     long="--pubstyle" 
     args="pub_code"
  countRange="{1,1}" 
  parseMethod="parsePubstyle">
  <help>
   PUBSTYLE:
   Code or mnemomic to identifier the publisher or journal style.
   this is a list of journal/publisher styles so Norma knows how to
   interpret the
   input. At present only one argument is allowed. The pubstyle determines the
   format
   of the XML or HTML, the metadata, and soon how to parse the PDF. At
   present we'll use
   mnemonics such as 'bmc' or 'biomedcentral.com' or 'cellpress'.

   To get a list of these use "+"--pubstyle"+" without arguments. 
   <p class="note">
   under early
   development and note also that publisher styles change and can be transferred
   between publishers and journals
   </p>
   <p class="note">Does not trigger any actions</p>
  </help>
 </arg>

 <arg 
     name="relabelContent" 
     long="--relabelContent" 
     args=" file1"
  countRange="{1,*}"
  parseMethod="parseRelabelContent"
  runMethod="runRelabelContent">
  <help>
    <p>Inspects content - probably mislabelled by remote site and attempts to relabel file.
     Currently tests for HTML and PDF.  Not robust. Cannot swap files in same tree.</p>
  </help>
 </arg>

 <arg 
     name="rename" 
     long="--rename" 
     args=" file1,file2 [file1,file2 ....]"
  class="org.xmlcml.cproject.args.StringPair" 
  countRange="{1,*}"
  parseMethod="parseRename"
  runMethod="runRename">
  <help>
   NOT YET IMPLEMENTED
   List of comma-separated pairs of filenames; the first is replaced by the
   second. Supports simple regex
   Example might be:
   <tt>tab.htm table.html</tt>
   i.e. rename tab.htm to table.html
   <tt>table(\d+).html tables/table$1.html</tt>
   i.e. rename table1.html, table2.html ... to tables/table1.html, tables/table2.html ...
   
  </help>
 </arg>

 <arg name="standalone" long="--standalone" args="boolean" class="java.lang.Boolean"
  countRange="{0,1}" parseMethod="parseStandalone">
  <!-- default ="true" -->
  <help>
   STANDALONE:
   Treats XML document as standalone. Very useful as some parsers
   will take ages resolving the DTD and often fail
   if not connected to the net.
  </help>
 </arg>

 <arg
   name="strip" 
   brief="-s" 
   long="--strip" 
   args="[options to strip]"
   countRange="{0,*}" 
   parseMethod="parseStrip">
  <help>
   List of XML components to strip from the raw well-formed HTML;
   <ul>
    <li>if a list is given, then use that; if this argument is missing
     (or
     the single string '#pubstyle' then the Pubstyle defaults are
     used.
    </li>
    <li>If there are no arguments then no stripping is done. a
     single '?'
     will list the Pubstyle defaults
    </li>
   </ul>
   The following are allowed:
   <ul>
    <li>
     an element local name (e.g.
     <tt>input</tt>
     )
    </li>
    <li>
     an XPath expression (e.g.
     <tt>//*[@class='foobar']</tt>
     )
    </li>
    <li>
     <tt>!DOCTYPE</tt>
     (strips
     <tt>&lt;!DOCTYPE ...></tt>
     which speeds up reading)
    </li>
    <li>an attribute (e.g. @class) (NotYetImplemented)</li>
   </ul>
   <p class="note">
    tokens are whitespace-separated (sorry if this interacts with
    XPath)
    Examples:
    <ul>
     <li>
      input script object (removes these three element
      <tt>//*[contains(@class,'sidebar')] (removes &lt;div
       class='sidebar'> ...
       &lt;/div>
      </tt>
     </li>
     <li>!DOCTYPE (removes &lt;!DOCTYPE ...> before parsing))</li>
     <li>!DOCTYPE input script object //*[contains(@class,'sidebar')]
      (removes all the
      above)
     </li>
    </ul>
   </p>
   <p class="note">some of this is hardcoded in HTMLCleaner and should be refactored</p>
  </help>
 </arg>

    <arg 
        name="tag"
        long="--tag"
        args=" "
        countRange="{0,*}"
        parseMethod="parseTag"
        class="java.lang.String"
        default="src/main/resources/org/xmlcml/norma/pubstyle/sectionTagger.xml"
        >
        <help>
          <p class="brief">Adds section tags to scholarly.html</p>
          <p>Not yet implemented</p>
        </help>
    </arg>
        
 <arg name="tidy" brief="-t" long="--tidy" args="[HTML tidy option]"
  countRange="{1,1}" parseMethod="parseTidy">
  <!-- add default ="JSoup" -->
  <help>
   OBSOLETE - use --html
   TIDY:
   Choose an HTML tidy tool. At present we have:
   JTidy JSoup and HtmlUnit
   (NYI) This is very experimental at present.
  </help>
 </arg>

 <arg 
     name="transform" 
     long="--transform" 
     args="stylesheet"
  countRange="{1,*}" 
  parseMethod="parseTransform" 
  runMethod="runTransform"
  >
  <help>
  <p class="brief">
   Transform XML or HTML or PDF or other input</p>
   <p class="note">Replacement for --xsl</p>
   <p>Argument may be a file/URL reference to a
   stylesheet,
   or a code from one of {nlm, jats, pdfbox, hocr2svg, pdf2txt, jsoup,
   [jtidy, htmlunit NYI]}
   the codes are checked first and then the document reference.

   Requires input and output files (--input and --output). These must be
   reserved names
   (e.g. fulltext.xml) in cmDir OR files in reserved directories and
   determine the type of files to convert.
   </p>
   <p>NOTE: multiple stylesheets are deprecated</p>
   NOTE : the transformer mechanism will be refactored to be more plugin-like
  </help>
  <value name="compactsvg" input="*.svg" output="*.svg"></value> 
  <value name="decompactsvg" input="*.svg" output="*.svg"></value> 
  <value name="pdfbox"></value> 
  <value name="pdf2tei" input="fulltext.pdf" output="fulltext.tei.xml"></value> 
  <value name="pdf2svg" input="fulltext.pdf" output="fulltext.pdf.html"></value> 
  <value name="pdf2html" input="fulltext.pdf" output="fulltext.html"></value> 
  <value name="pdf2txt" input="fulltext.pdf" output="fulltext.pdf.txt"></value> 
  <value name="pdf2images"></value> 
  <value name="hocr2svg" input="image/*.png" output="image/*.svg"></value> 
  <value name="scatter2csv" input="figure/*.svg" output="figure/*.csv"></value> 
  <value name="svg2svg"  input="*.svg" output="*.svg"></value> 
  <value name="tei2html" input="fulltext.tei.xml" output="fulltext.tei.html"></value> 
  <value name="tex2html" input="fulltext.tex" output="fulltext.html"></value> 
  <value name="csv2html" input="table/*.csv" output="table/*.html"></value> 
  <value name="*.xsl" input="fulltext.xml" output="fulltext.html"></value> 
    </arg>

 <arg 
     name="xsl" 
     brief="-x" 
     long="--xsl" 
     args="stylesheet"
  countRange="{1,5}" 
  parseMethod="parseXsl" 
  runMethod="transform"
  required="--input --output">
  <help>
   DEPRECATED (use transform)
  </help>
 </arg>

 <examples>
  <p class="note">
   These examples contain some symbolic directory names.
   <ul>
    <li>
     <code>$ctree</code>
     represent the top of a ctree (e.g.
     <code>PMC12345</code>
     in
     <code>PMC12345/fulltext.xml</code>
     )
    </li>
    <li>
     <code>$parent</code>
     represents the parent of one or more <em><code>ctree</code></em>s, e.g.
     (e.g.
     <code>my/files/</code>
     in
     <code>my/files/PMC12345/fulltext.xml
     , my/files/PMC12349/fulltext.xml
    </code>
     )
    </li>
    <li>
     <code>*</code>
     is implicit and represents one or more <em><code>ctree</code></em>s, e.g.
     <code>my/files/*/fulltext.xml</code>
     in
     <code>my/files/PMC12345/fulltext.xml
     , my/files/PMC12349/fulltext.xml
    </code>
     )
    </li>
    <li>
     <code>wild*</code>
     is explicit and represents one or more <em><code>ctree</code></em>s, e.g.
     <code>my/files/PMC1234*/fulltext.xml</code>
     in
     <code>my/files/PMC12345/fulltext.xml
     , my/files/PMC12349/fulltext.xml
    </code>
     )
    </li>
   </ul>
  </p>
  <example>
   <input>$ctree/fulltext.xml</input>
   <output>$ctree/scholarly.html</output>
   <desc> Convert a single <em><code>ctree</code></em> containing NLM-XML to
    scholarly HTML
   </desc>
   <command>norma -q $ctree -i fulltext.xml -o
    scholarly.html --transform
    nlm2html
   </command>
  </example>
  <example>
   <input>$parent/wildcard*/fulltext.xml</input>
   <output>$parent/wildcard*/scholarly.pdf.txt</output>
   <desc> Use wildcard to select many matching <em><code>ctree</code></em>s
    containing NLM-XML and convert to scholarly HTML
   </desc>
   <command>norma -q ./plosone/PMC4382* -i fulltext.xml -o
    scholarly.html --transform nlm2html
   </command>
  </example>
  <example>
   <input>$parent/*/fulltext.xml</input>
   <output>$parent/*/scholarly.pdf.txt</output>
   <desc> Converting NLM-XML in multiple <em><code>ctree</code></em>s to scholarly HTML </desc>
   <command>norma -q ./plosone/ -i fulltext.xml -o scholarly.html
    --transform nlm2html
   </command>
  </example>
  <example>
   <input>$ctree/fulltext.pdf</input>
   <output>$ctree/scholarly.pdf.txt</output>
   <desc>
    Convert a single
    <em><code>ctree</code></em>
    containing
    <code>fulltext.pdf</code>
    to plain text
   </desc>
   <command>norma -q ./peerjpdf/PMC4389270/ --transform pdf2txt -i
    fulltext.pdf
    -o fulltext.pdf.txt
   </command>
  </example>
  <example>
   <input>$parent/*/fulltext.pdf</input>
   <output>$parent/*/scholarly.pdf.txt</output>
   <desc>
    Convert multiple <em><code>ctree</code></em>s (children of
    <code>$parent</code>
    ) containing
    <code>fulltext.pdf</code>
    to
    plain text
   </desc>
   <command>norma -q ./peerjpdf/ --transform pdf2txt -i fulltext.pdf -o
    fulltext.pdf.txt
   </command>
  </example>
  <example>
   <input>$ctree/fulltext.html</input>
   <output>$ctree/tidied.html</output>
   <desc> Tidy raw HTML in <code>$ctree</code> with <code>htmlunit</code> </desc>
   <command>norma -q https_peerj.com_articles_384/ -i fulltext.html -o
    tidied.html --html htmlunit
   </command>
  </example>
  <example>
   <input>$ctree/fulltext.html</input>
   <output>$ctree/tidied.html</output>
   <desc> Tidy raw HTML in <code>$ctree</code> with <code>jtidy</code> </desc>
   <command>norma -q https_peerj.com_articles_384/ -i fulltext.html -o
    tidied.html --html jtidy
   </command>
  </example>
  <example>
   <input>$ctree/fulltext.html</input>
   <output>$ctree/tidied.html</output>
   <desc> Tidy raw HTML in <code>$ctree</code> with <code>jsoup</code> </desc>
   <command>norma -q https_peerj.com_articles_384/ -i fulltext.html -o
    tidied.html --html jsoup
   </command>
  </example>
  <example>
   <input>$parent/*/fulltext.html</input>
   <output>$parent/*/tidied.html</output>
   <desc>
    tidy multiple child <em><code>ctree</code></em>s of
    <tt>$parent</tt>
    using
    <tt>jsoup</tt>
   </desc>
   <command>norma -q $parent -i fulltext.html -o tidied.html --html
    jsoup</command>
  </example>
 </examples>

</argList>
      
